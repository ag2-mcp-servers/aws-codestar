# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:13:27+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, RootModel, SecretStr, conint, constr


class BucketKey(RootModel[str]):
    root: str


class BucketName(RootModel[constr(min_length=3, max_length=63)]):
    root: constr(min_length=3, max_length=63)


class ClientRequestToken(
    RootModel[constr(pattern=r'^[\w:/-]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[\w:/-]+$', min_length=1, max_length=256)


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class CreatedTimestamp(RootModel[datetime]):
    root: datetime


class DeleteStack(RootModel[bool]):
    root: bool


class DisassociateTeamMemberResult(BaseModel):
    pass


class Email(RootModel[SecretStr]):
    root: SecretStr


class GitHubPersonalToken(RootModel[SecretStr]):
    root: SecretStr


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidServiceRoleException(RootModel[Any]):
    root: Any


class LastModifiedTimestamp(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PaginationToken(
    RootModel[constr(pattern=r'^[\w/+=]+$', min_length=1, max_length=512)]
):
    root: constr(pattern=r'^[\w/+=]+$', min_length=1, max_length=512)


class ProjectAlreadyExistsException(RootModel[Any]):
    root: Any


class ProjectArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:\s]*:codestar:[^:\s]+:[0-9]{12}:project\/[a-z]([a-z0-9|-])+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:\s]*:codestar:[^:\s]+:[0-9]{12}:project\/[a-z]([a-z0-9|-])+$'
    )


class ProjectConfigurationException(RootModel[Any]):
    root: Any


class ProjectCreationFailedException(RootModel[Any]):
    root: Any


class ProjectDescription(RootModel[SecretStr]):
    root: SecretStr


class ProjectId(
    RootModel[constr(pattern=r'^[a-z][a-z0-9-]+$', min_length=2, max_length=15)]
):
    root: constr(pattern=r'^[a-z][a-z0-9-]+$', min_length=2, max_length=15)


class ProjectName(RootModel[SecretStr]):
    root: SecretStr


class ProjectNotFoundException(RootModel[Any]):
    root: Any


class ProjectSummary(BaseModel):
    projectArn: Optional[ProjectArn] = None
    projectId: Optional[ProjectId] = None


class ProjectTemplateId(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:\s]{0,5}:codestar:[^:\s]+::project-template(\/(github|codecommit))?\/[a-z0-9-]+$',
            min_length=1,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:\s]{0,5}:codestar:[^:\s]+::project-template(\/(github|codecommit))?\/[a-z0-9-]+$',
        min_length=1,
    )


class ProjectsList(RootModel[List[ProjectSummary]]):
    root: List[ProjectSummary]


class Reason(RootModel[constr(pattern=r'^$|^\S(.*\S)?$', max_length=1024)]):
    root: constr(pattern=r'^$|^\S(.*\S)?$', max_length=1024)


class RemoteAccessAllowed(RootModel[bool]):
    root: bool


class RepositoryDescription(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=1000)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=1000)


class RepositoryEnableIssues(RootModel[bool]):
    root: bool


class RepositoryIsPrivate(RootModel[bool]):
    root: bool


class RepositoryName(
    RootModel[constr(pattern=r'^\S[\w.-]*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^\S[\w.-]*$', min_length=1, max_length=100)


class RepositoryOwner(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=100)


class RepositoryType(
    RootModel[constr(pattern=r'^(user|organization|User|Organization)$')]
):
    root: constr(pattern=r'^(user|organization|User|Organization)$')


class ResourceId(RootModel[constr(pattern=r'^arn\:aws\:\S.*\:.*', min_length=11)]):
    root: constr(pattern=r'^arn\:aws\:\S.*\:.*', min_length=11)


class Role(RootModel[constr(pattern=r'^(Owner|Viewer|Contributor)$')]):
    root: constr(pattern=r'^(Owner|Viewer|Contributor)$')


class RoleArn(RootModel[constr(min_length=1, max_length=1224)]):
    root: constr(min_length=1, max_length=1224)


class S3Location(BaseModel):
    bucketKey: Optional[BucketKey] = None
    bucketName: Optional[BucketName] = None


class SshPublicKey(
    RootModel[constr(pattern=r'^[\t\r\n\u0020-\u00FF]*$', max_length=16384)]
):
    root: constr(pattern=r'^[\t\r\n\u0020-\u00FF]*$', max_length=16384)


class StackId(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:\s]*:cloudformation:[^:\s]+:[0-9]{12}:stack\/[^:\s]+\/[^:\s]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:\s]*:cloudformation:[^:\s]+:[0-9]{12}:stack\/[^:\s]+\/[^:\s]+$'
    )


class State(
    RootModel[
        constr(
            pattern=r'^(CreateInProgress|CreateComplete|CreateFailed|DeleteComplete|DeleteFailed|DeleteInProgress|UpdateComplete|UpdateInProgress|UpdateFailed|Unknown)$'
        )
    ]
):
    root: constr(
        pattern=r'^(CreateInProgress|CreateComplete|CreateFailed|DeleteComplete|DeleteFailed|DeleteInProgress|UpdateComplete|UpdateInProgress|UpdateFailed|Unknown)$'
    )


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagValue(
    RootModel[constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)]
):
    root: constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)


class Tags(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TeamMemberAlreadyAssociatedException(RootModel[Any]):
    root: Any


class TeamMemberNotFoundException(RootModel[Any]):
    root: Any


class TemplateParameterKey(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=30)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=30)


class TemplateParameterValue(RootModel[SecretStr]):
    root: SecretStr


class ToolchainSource(BaseModel):
    s3: S3Location


class UntagProjectRequest(BaseModel):
    id: ProjectId
    tags: TagKeys


class UntagProjectResult(BaseModel):
    pass


class UpdateProjectRequest(BaseModel):
    description: Optional[ProjectDescription] = None
    id: ProjectId
    name: Optional[ProjectName] = None


class UpdateProjectResult(BaseModel):
    pass


class UserArn(
    RootModel[
        constr(
            pattern=r'^arn:aws:iam::\d{12}:user(?:(\u002F)|(\u002F[\u0021-\u007E]+\u002F))[\w+=,.@-]+$',
            min_length=32,
            max_length=95,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws:iam::\d{12}:user(?:(\u002F)|(\u002F[\u0021-\u007E]+\u002F))[\w+=,.@-]+$',
        min_length=32,
        max_length=95,
    )


class UserProfileAlreadyExistsException(RootModel[Any]):
    root: Any


class UserProfileDisplayName(RootModel[SecretStr]):
    root: SecretStr


class UserProfileNotFoundException(RootModel[Any]):
    root: Any


class UserProfileSummary(BaseModel):
    displayName: Optional[UserProfileDisplayName] = None
    emailAddress: Optional[Email] = None
    sshPublicKey: Optional[SshPublicKey] = None
    userArn: Optional[UserArn] = None


class UserProfilesList(RootModel[List[UserProfileSummary]]):
    root: List[UserProfileSummary]


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    CodeStar_20170419_AssociateTeamMember = 'CodeStar_20170419.AssociateTeamMember'


class XAmzTarget1(Enum):
    CodeStar_20170419_CreateProject = 'CodeStar_20170419.CreateProject'


class XAmzTarget2(Enum):
    CodeStar_20170419_CreateUserProfile = 'CodeStar_20170419.CreateUserProfile'


class XAmzTarget3(Enum):
    CodeStar_20170419_DeleteProject = 'CodeStar_20170419.DeleteProject'


class XAmzTarget4(Enum):
    CodeStar_20170419_DeleteUserProfile = 'CodeStar_20170419.DeleteUserProfile'


class XAmzTarget5(Enum):
    CodeStar_20170419_DescribeProject = 'CodeStar_20170419.DescribeProject'


class XAmzTarget6(Enum):
    CodeStar_20170419_DescribeUserProfile = 'CodeStar_20170419.DescribeUserProfile'


class XAmzTarget7(Enum):
    CodeStar_20170419_DisassociateTeamMember = (
        'CodeStar_20170419.DisassociateTeamMember'
    )


class XAmzTarget8(Enum):
    CodeStar_20170419_ListProjects = 'CodeStar_20170419.ListProjects'


class XAmzTarget9(Enum):
    CodeStar_20170419_ListResources = 'CodeStar_20170419.ListResources'


class XAmzTarget10(Enum):
    CodeStar_20170419_ListTagsForProject = 'CodeStar_20170419.ListTagsForProject'


class XAmzTarget11(Enum):
    CodeStar_20170419_ListTeamMembers = 'CodeStar_20170419.ListTeamMembers'


class XAmzTarget12(Enum):
    CodeStar_20170419_ListUserProfiles = 'CodeStar_20170419.ListUserProfiles'


class XAmzTarget13(Enum):
    CodeStar_20170419_TagProject = 'CodeStar_20170419.TagProject'


class XAmzTarget14(Enum):
    CodeStar_20170419_UntagProject = 'CodeStar_20170419.UntagProject'


class XAmzTarget15(Enum):
    CodeStar_20170419_UpdateProject = 'CodeStar_20170419.UpdateProject'


class XAmzTarget16(Enum):
    CodeStar_20170419_UpdateTeamMember = 'CodeStar_20170419.UpdateTeamMember'


class XAmzTarget17(Enum):
    CodeStar_20170419_UpdateUserProfile = 'CodeStar_20170419.UpdateUserProfile'


class AssociateTeamMemberRequest(BaseModel):
    clientRequestToken: Optional[ClientRequestToken] = None
    projectId: ProjectId
    projectRole: Role
    remoteAccessAllowed: Optional[RemoteAccessAllowed] = None
    userArn: UserArn


class AssociateTeamMemberResult(BaseModel):
    clientRequestToken: Optional[ClientRequestToken] = None


class CodeCommitCodeDestination(BaseModel):
    name: RepositoryName


class CodeSource(BaseModel):
    s3: S3Location


class CreateProjectResult(BaseModel):
    arn: ProjectArn
    clientRequestToken: Optional[ClientRequestToken] = None
    id: ProjectId
    projectTemplateId: Optional[ProjectTemplateId] = None


class CreateUserProfileRequest(BaseModel):
    displayName: UserProfileDisplayName
    emailAddress: Email
    sshPublicKey: Optional[SshPublicKey] = None
    userArn: UserArn


class CreateUserProfileResult(BaseModel):
    createdTimestamp: Optional[CreatedTimestamp] = None
    displayName: Optional[UserProfileDisplayName] = None
    emailAddress: Optional[Email] = None
    lastModifiedTimestamp: Optional[LastModifiedTimestamp] = None
    sshPublicKey: Optional[SshPublicKey] = None
    userArn: UserArn


class DeleteProjectRequest(BaseModel):
    clientRequestToken: Optional[ClientRequestToken] = None
    deleteStack: Optional[DeleteStack] = None
    id: ProjectId


class DeleteProjectResult(BaseModel):
    projectArn: Optional[ProjectArn] = None
    stackId: Optional[StackId] = None


class DeleteUserProfileRequest(BaseModel):
    userArn: UserArn


class DeleteUserProfileResult(BaseModel):
    userArn: UserArn


class DescribeProjectRequest(BaseModel):
    id: ProjectId


class DescribeUserProfileRequest(BaseModel):
    userArn: UserArn


class DescribeUserProfileResult(BaseModel):
    createdTimestamp: CreatedTimestamp
    displayName: Optional[UserProfileDisplayName] = None
    emailAddress: Optional[Email] = None
    lastModifiedTimestamp: LastModifiedTimestamp
    sshPublicKey: Optional[SshPublicKey] = None
    userArn: UserArn


class DisassociateTeamMemberRequest(BaseModel):
    projectId: ProjectId
    userArn: UserArn


class GitHubCodeDestination(BaseModel):
    description: Optional[RepositoryDescription] = None
    issuesEnabled: RepositoryEnableIssues
    name: RepositoryName
    owner: RepositoryOwner
    privateRepository: RepositoryIsPrivate
    token: GitHubPersonalToken
    type: RepositoryType


class ListProjectsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListProjectsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    projects: ProjectsList


class ListResourcesRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None
    projectId: ProjectId


class ListTagsForProjectRequest(BaseModel):
    id: ProjectId
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListTagsForProjectResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    tags: Optional[Tags] = None


class ListTeamMembersRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None
    projectId: ProjectId


class ListUserProfilesRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListUserProfilesResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    userProfiles: UserProfilesList


class ProjectStatus(BaseModel):
    reason: Optional[Reason] = None
    state: State


class Resource(BaseModel):
    id: ResourceId


class ResourcesResult(RootModel[List[Resource]]):
    root: List[Resource]


class TagProjectRequest(BaseModel):
    id: ProjectId
    tags: Tags


class TagProjectResult(BaseModel):
    tags: Optional[Tags] = None


class TeamMember(BaseModel):
    projectRole: Role
    remoteAccessAllowed: Optional[RemoteAccessAllowed] = None
    userArn: UserArn


class TeamMemberResult(RootModel[List[TeamMember]]):
    root: List[TeamMember]


class TemplateParameterMap(RootModel[Optional[Dict[str, TemplateParameterValue]]]):
    root: Optional[Dict[str, TemplateParameterValue]] = None


class Toolchain(BaseModel):
    roleArn: Optional[RoleArn] = None
    source: ToolchainSource
    stackParameters: Optional[TemplateParameterMap] = None


class UpdateTeamMemberRequest(BaseModel):
    projectId: ProjectId
    projectRole: Optional[Role] = None
    remoteAccessAllowed: Optional[RemoteAccessAllowed] = None
    userArn: UserArn


class UpdateTeamMemberResult(BaseModel):
    projectRole: Optional[Role] = None
    remoteAccessAllowed: Optional[RemoteAccessAllowed] = None
    userArn: Optional[UserArn] = None


class UpdateUserProfileRequest(BaseModel):
    displayName: Optional[UserProfileDisplayName] = None
    emailAddress: Optional[Email] = None
    sshPublicKey: Optional[SshPublicKey] = None
    userArn: UserArn


class UpdateUserProfileResult(BaseModel):
    createdTimestamp: Optional[CreatedTimestamp] = None
    displayName: Optional[UserProfileDisplayName] = None
    emailAddress: Optional[Email] = None
    lastModifiedTimestamp: Optional[LastModifiedTimestamp] = None
    sshPublicKey: Optional[SshPublicKey] = None
    userArn: UserArn


class CodeDestination(BaseModel):
    codeCommit: Optional[CodeCommitCodeDestination] = None
    gitHub: Optional[GitHubCodeDestination] = None


class DescribeProjectResult(BaseModel):
    arn: Optional[ProjectArn] = None
    clientRequestToken: Optional[ClientRequestToken] = None
    createdTimeStamp: Optional[CreatedTimestamp] = None
    description: Optional[ProjectDescription] = None
    id: Optional[ProjectId] = None
    name: Optional[ProjectName] = None
    projectTemplateId: Optional[ProjectTemplateId] = None
    stackId: Optional[StackId] = None
    status: Optional[ProjectStatus] = None


class ListResourcesResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    resources: Optional[ResourcesResult] = None


class ListTeamMembersResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    teamMembers: TeamMemberResult


class Code(BaseModel):
    destination: CodeDestination
    source: CodeSource


class SourceCode(RootModel[List[Code]]):
    root: List[Code]


class CreateProjectRequest(BaseModel):
    clientRequestToken: Optional[ClientRequestToken] = None
    description: Optional[ProjectDescription] = None
    id: ProjectId
    name: ProjectName
    sourceCode: Optional[SourceCode] = None
    tags: Optional[Tags] = None
    toolchain: Optional[Toolchain] = None
